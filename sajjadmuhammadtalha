<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Simple Snake Game</title>
  <style>
    :root{--bg:#0f1724;--panel:#0b1220;--accent:#10b981;--muted:#94a3b8;--danger:#ef4444}
    *{box-sizing:border-box}
    html,body{height:100%;margin:0;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial}
    body{display:flex;align-items:center;justify-content:center;padding:18px;background:linear-gradient(180deg,#071020 0%, #071827 100%);color:#e6eef6}
    .wrap{width:100%;max-width:900px;display:grid;grid-template-columns:1fr 320px;gap:20px;align-items:start}
    .card{background:linear-gradient(180deg,var(--panel),#081220);padding:16px;border-radius:12px;box-shadow:0 8px 30px rgba(2,6,23,0.6)}
    .game-area{display:flex;flex-direction:column;align-items:center;gap:12px}
    canvas{background:#071627;border-radius:8px;border:2px solid rgba(255,255,255,0.03);width:100%;height:auto;max-width:640px}
    .hud{display:flex;gap:12px;align-items:center}
    .stat{background:rgba(255,255,255,0.02);padding:8px 12px;border-radius:8px;min-width:72px;text-align:center}
    .stat .label{display:block;font-size:12px;color:var(--muted)}
    .stat .value{font-weight:700;font-size:18px;color:var(--accent)}
    .controls{display:flex;flex-direction:column;gap:10px}
    .btn{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:8px;color:inherit;cursor:pointer}
    .btn.primary{background:var(--accent);color:#042018;border:none}
    .small{font-size:13px;padding:6px 8px}
    .right-panel{display:flex;flex-direction:column;gap:12px}
    h1{margin:0;font-size:18px}
    p.lead{margin:0;color:var(--muted);font-size:13px}
    label{font-size:13px;color:var(--muted)}
    input[type=range]{width:100%}
    .legend{display:flex;gap:8px;align-items:center}
    .dot{width:12px;height:12px;border-radius:3px}
    .dot.snake{background:var(--accent)}
    .dot.food{background:#f59e0b}
    footer{font-size:12px;color:var(--muted);margin-top:8px}
    @media (max-width:880px){.wrap{grid-template-columns:1fr}.right-panel{order:2}}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card game-area">
      <div style="display:flex;align-items:center;justify-content:space-between;width:100%">
        <div>
          <h1>Simple Snake Game</h1>
          <p class="lead">Use arrow keys or WASD. On mobile: swipe to control. Eat food to grow — avoid walls & yourself.</p>
        </div>
        <div class="hud">
          <div class="stat"><span class="label">Score</span><span id="score" class="value">0</span></div>
          <div class="stat"><span class="label">High</span><span id="highscore" class="value">0</span></div>
        </div>
      </div>

      <canvas id="game" width="600" height="600" aria-label="Snake game canvas"></canvas>

      <div style="display:flex;gap:10px;flex-wrap:wrap;justify-content:center;width:100%">
        <button id="startBtn" class="btn primary">Start / Restart</button>
        <button id="pauseBtn" class="btn small">Pause</button>
        <button id="muteBtn" class="btn small">Mute</button>
        <div style="min-width:160px">
          <label for="speed">Speed</label>
          <input id="speed" type="range" min="4" max="16" value="8">
        </div>
      </div>

      <footer>Tip: Hitting walls ends the game. Press space to pause.</footer>
    </div>

    <aside class="card right-panel">
      <div>
        <strong>How to play</strong>
        <ul style="margin:8px 0 0 18px;color:var(--muted);padding:0">
          <li>Move with arrows or WASD.</li>
          <li>Eat food to score and grow.</li>
          <li>Avoid colliding with walls or your tail.</li>
          <li>Use the speed slider to change difficulty.</li>
        </ul>
      </div>

      <div>
        <label>Legend</label>
        <div class="legend" style="margin-top:8px">
          <div class="dot snake"></div><div style="color:var(--muted)">Snake</div>
          <div style="width:12px"></div>
          <div class="dot food"></div><div style="color:var(--muted)">Food</div>
        </div>
      </div>

      <div>
        <label>Controls</label>
        <div style="margin-top:8px;color:var(--muted)">
          Arrow keys / WASD — move
          <br>Space — pause / resume
        </div>
      </div>

      <div>
        <label>Quick settings</label>
        <div style="display:flex;gap:8px;margin-top:8px">
          <button id="easyBtn" class="btn small">Easy</button>
          <button id="normalBtn" class="btn small">Normal</button>
          <button id="hardBtn" class="btn small">Hard</button>
        </div>
      </div>

      <div>
        <label>Made for learning</label>
        <div style="margin-top:8px;color:var(--muted)">Save & share the file — open in any modern browser.</div>
      </div>
    </aside>
  </div>

  <script>
    // Config
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const grid = 20; // size of one cell in px
    const cols = canvas.width / grid;
    const rows = canvas.height / grid;

    // UI elements
    const scoreEl = document.getElementById('score');
    const highEl = document.getElementById('highscore');
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const muteBtn = document.getElementById('muteBtn');
    const speedRange = document.getElementById('speed');
    const easyBtn = document.getElementById('easyBtn');
    const normalBtn = document.getElementById('normalBtn');
    const hardBtn = document.getElementById('hardBtn');

    // Game state
    let snake, food, dir, nextDir, running = false, paused = false;
    let score = 0; let highscore = 0; let tickInterval = 1000/8; // ms per move
    let lastTick = 0; let muted = false;

    // Load highscore
    try { highscore = Number(localStorage.getItem('snake_highscore') || 0) } catch(e){ highscore = 0 }
    highEl.textContent = highscore;

    function reset() {
      const startLength = 5;
      snake = [];
      const startX = Math.floor(cols/2);
      const startY = Math.floor(rows/2);
      for(let i=0;i<startLength;i++) snake.push({x: startX - i, y: startY});
      dir = {x:1,y:0}; nextDir = null;
      placeFood();
      score = 0; scoreEl.textContent = score;
      running = true; paused = false;
      lastTick = performance.now();
      tickInterval = 1000 / Number(speedRange.value);
    }

    function placeFood(){
      while(true){
        const fx = Math.floor(Math.random()*cols);
        const fy = Math.floor(Math.random()*rows);
        if(!snake.some(s => s.x===fx && s.y===fy)) { food = {x:fx,y:fy}; break }
      }
    }

    function update(time){
      if(!running || paused) { requestAnimationFrame(update); return }
      if(time - lastTick >= tickInterval){
        lastTick = time;
        step();
      }
      draw();
      requestAnimationFrame(update);
    }

    function step(){
      if(nextDir){
        // prevent reversing
        if(!(nextDir.x === -dir.x && nextDir.y === -dir.y)) dir = nextDir;
        nextDir = null;
      }
      const head = {x: snake[0].x + dir.x, y: snake[0].y + dir.y};

      // check walls
      if(head.x < 0 || head.x >= cols || head.y < 0 || head.y >= rows){
        return gameOver();
      }

      // check self-collision
      if(snake.some(s => s.x===head.x && s.y===head.y)) return gameOver();

      snake.unshift(head);

      // eat food
      if(head.x === food.x && head.y === food.y){
        score += 1; scoreEl.textContent = score;
        if(score > highscore){ highscore = score; highEl.textContent = highscore; try{localStorage.setItem('snake_highscore', highscore)}catch(e){} }
        placeFood();
      } else {
        snake.pop();
      }
    }

    function gameOver(){
      running = false;
      paused = false;
      // flash effect
      flashText('Game Over — Click Start to play again');
    }

    function flashText(msg){
      const orig = scoreEl.textContent;
      scoreEl.textContent = msg;
      setTimeout(()=> scoreEl.textContent = score, 900);
    }

    function draw(){
      // background
      ctx.fillStyle = '#071627';
      ctx.fillRect(0,0,canvas.width,canvas.height);

      // grid subtle
      ctx.strokeStyle = 'rgba(255,255,255,0.02)';
      ctx.lineWidth = 1;
      for(let x=0;x<=cols;x++){
        ctx.beginPath(); ctx.moveTo(x*grid,0); ctx.lineTo(x*grid,canvas.height); ctx.stroke();
      }
      for(let y=0;y<=rows;y++){
        ctx.beginPath(); ctx.moveTo(0,y*grid); ctx.lineTo(canvas.width,y*grid); ctx.stroke();
      }

      // food
      drawCell(food.x, food.y, '#f59e0b');

      // snake body
      for(let i=snake.length-1;i>=0;i--){
        const p = snake[i];
        const shade = i===0 ? '#10b981' : '#0ea57a';
        drawCell(p.x,p.y,shade, i===0 ? 6 : 3);
      }
    }

    function drawCell(x,y,color,r=4){
      const px = x*grid; const py = y*grid;
      const pad = 4;
      const w = grid - pad; const h = grid - pad;
      const rx = Math.max(0, r);
      ctx.fillStyle = color;
      roundRect(ctx, px + pad/2, py + pad/2, w, h, rx, true, false);
    }

    // rounded rect helper
    function roundRect(ctx, x, y, w, h, r, fill, stroke) {
      if (typeof r === 'undefined') r = 5;
      if (typeof r === 'number') r = {tl: r, tr: r, br: r, bl: r};
      ctx.beginPath();
      ctx.moveTo(x + r.tl, y);
      ctx.lineTo(x + w - r.tr, y);
      ctx.quadraticCurveTo(x + w, y, x + w, y + r.tr);
      ctx.lineTo(x + w, y + h - r.br);
      ctx.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);
      ctx.lineTo(x + r.bl, y + h);
      ctx.quadraticCurveTo(x, y + h, x, y + h - r.bl);
      ctx.lineTo(x, y + r.tl);
      ctx.quadraticCurveTo(x, y, x + r.tl, y);
      ctx.closePath();
      if (fill) ctx.fill();
      if (stroke) ctx.stroke();
    }

    // Input handling
    window.addEventListener('keydown', e=>{
      if(!running && e.key === ' ') { reset(); return }
      if(e.key === ' '){ paused = !paused; pauseBtn.textContent = paused ? 'Resume' : 'Pause'; }
      const k = e.key;
      if(k === 'ArrowUp' || k==='w' || k==='W') nextDir = {x:0,y:-1};
      if(k === 'ArrowDown' || k==='s' || k==='S') nextDir = {x:0,y:1};
      if(k === 'ArrowLeft' || k==='a' || k==='A') nextDir = {x:-1,y:0};
      if(k === 'ArrowRight' || k==='d' || k==='D') nextDir = {x:1,y:0};
    });

    // Buttons
    startBtn.addEventListener('click', ()=>{ reset(); if(!running) running = true; });
    pauseBtn.addEventListener('click', ()=>{ if(!running) return; paused = !paused; pauseBtn.textContent = paused ? 'Resume' : 'Pause'; });
    muteBtn.addEventListener('click', ()=>{ muted = !muted; muteBtn.textContent = muted ? 'Unmute' : 'Mute'; });
    speedRange.addEventListener('input', ()=>{ tickInterval = 1000/Number(speedRange.value) });
    easyBtn.addEventListener('click', ()=>{ speedRange.value = 6; speedRange.dispatchEvent(new Event('input')) });
    normalBtn.addEventListener('click', ()=>{ speedRange.value = 8; speedRange.dispatchEvent(new Event('input')) });
    hardBtn.addEventListener('click', ()=>{ speedRange.value = 12; speedRange.dispatchEvent(new Event('input')) });

    // Touch support (swipe)
    let touchStart = null;
    canvas.addEventListener('touchstart', e=>{
      const t = e.touches[0]; touchStart = {x:t.clientX, y:t.clientY, time:Date.now()};
    }, {passive:true});
    canvas.addEventListener('touchmove', e=>{ e.preventDefault(); }, {passive:false});
    canvas.addEventListener('touchend', e=>{
      if(!touchStart) return;
      const t = e.changedTouches[0];
      const dx = t.clientX - touchStart.x; const dy = t.clientY - touchStart.y;
      if(Math.abs(dx) > Math.abs(dy)){
        if(dx > 20) nextDir = {x:1,y:0}; else if(dx < -20) nextDir = {x:-1,y:0};
      } else {
        if(dy > 20) nextDir = {x:0,y:1}; else if(dy < -20) nextDir = {x:0,y:-1};
      }
      touchStart = null;
    }, {passive:true});

    // Resize canvas to keep crisp pixels on high-DPI screens
    function resizeCanvas(){
      const ratio = window.devicePixelRatio || 1;
      const w = 600; const h = 600;
      canvas.style.width = Math.min(640, window.innerWidth-40) + 'px';
      canvas.style.height = canvas.style.width;
      canvas.width = w * ratio; canvas.height = h * ratio;
      ctx.setTransform(ratio,0,0,ratio,0,0);
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    // Start main loop
    requestAnimationFrame(update);

    // Auto-start once
    reset();
  </script>
</body>
</html>
